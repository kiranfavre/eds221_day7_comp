---
title: "Joins and Strings and Dates"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(here)
library(janitor)
```

# Morning interactive session

## Joins

```{r}
animals <- tibble::tribble(
             ~location,   ~species,  ~maturity,
              "lagoon",   "bobcat",    "adult",
               "bluff",   "coyote", "juvenile",
               "creek",      "fox",    "adult",
                "oaks", "squirrel", "juvenile",
               "bluff",   "bobcat",    "adult"
             )

sites <- tibble::tribble(
       ~location, ~full_site_name, ~jurisdiction,
         "beach", "Goleta Beach", "SB City",
        "lagoon", "UCSB Lagoon", "UCSB",
         "bluff", "Ellwood Mesa", "SB City",
          "oaks", "Fremont Campground", "USFS"
       )

```

### Full join: combines all columns

```{r}
full_join_example <- full_join(animals, sites) # by = "location if you want to be explicit) 
```

### Left join: adds new columns to y data table

```{r}
left_join_example <- left_join(animals, sites)
```

### Inner join: only keeps columns with matches in x and y

```{r}
inner_join_example <- inner_join(animals, sites)
```

What if the keys don't match?

```{r}
sites_2 <- sites |> 
  rename(loc = location)

nonmatching <- full_join(animals, sites_2, by = c("location" = "loc"))
```

### Semi join: does not add new columns

```{r}
semi_join_example <- semi_join(animals, sites, by = "location")
```

### Anti join: returns rows of x that does not match in y

```{r}
anti_join_example <- anti_join(animals, sites, by = "location")
```

## Refresher

```{r}
library(palmerpenguins)
penguins <- palmerpenguins::penguins
```

Only include penguins at Biscoe and Dream islands,

```{r}
Biscoe_Dream_penguins <- penguins |> 
  filter(island %in% c("Biscoe", "Dream")) |> 
  select(-year, -sex) |> 
  mutate(body_mass_kg = body_mass_g / 1000) |> 
  rename(location = island)


```

# Afternoon session

## Dates and times with `lubridate`

```{r}
library(lubridate)
```

```{r}
my_date <- "03-15-1998"
# to use lubridate, must call it and input the format of date given. (either mdy,dmy,ymd). Will return in ISO form
lubridate::mdy(my_date) 

my_datee <- "11/07/2003"
lubridate::dmy(my_datee)

date <- "08-Jun-1974"
lubridate::dmy(date)

date1 <- "19610518"
lubridate::ymd(date1)
```

```{r}
lubridate::ymd("1942-08-30")

lubridate::mdy("09/22/84")
```

```{r}
time <- "2020-08-12 11:18"
time <- lubridate::ymd_hm(time)  #year, month, day, hours, mins
class(time)
```

```{r}
#time zone conversion
with_tz(time, "America/Los_Angeles")

with_tz(time, "Europe/London")

with_tz(time, "Asia/Jakarta")

my_time <- ymd_hms(time)
year(my_time)
day(my_time)
second(my_time)

```

```{r}
my_bday <- ymd("19991012")

wday(my_bday, label = TRUE)
```
