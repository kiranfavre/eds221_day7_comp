---
title: "Joins and Strings and Dates"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(here)
library(janitor)
```

# Morning interactive session

## Joins

```{r}
animals <- tibble::tribble(
             ~location,   ~species,  ~maturity,
              "lagoon",   "bobcat",    "adult",
               "bluff",   "coyote", "juvenile",
               "creek",      "fox",    "adult",
                "oaks", "squirrel", "juvenile",
               "bluff",   "bobcat",    "adult"
             )

sites <- tibble::tribble(
       ~location, ~full_site_name, ~jurisdiction,
         "beach", "Goleta Beach", "SB City",
        "lagoon", "UCSB Lagoon", "UCSB",
         "bluff", "Ellwood Mesa", "SB City",
          "oaks", "Fremont Campground", "USFS"
       )

```

### Full join: combines all columns

```{r}
full_join_example <- full_join(animals, sites) # by = "location if you want to be explicit) 
```

### Left join: adds new columns to y data table

```{r}
left_join_example <- left_join(animals, sites)
```

### Inner join: only keeps columns with matches in x and y

```{r}
inner_join_example <- inner_join(animals, sites)
```

What if the keys don't match?

```{r}
sites_2 <- sites |> 
  rename(loc = location)

nonmatching <- full_join(animals, sites_2, by = c("location" = "loc"))
```

### Semi join: does not add new columns

```{r}
semi_join_example <- semi_join(animals, sites, by = "location")
```

### Anti join: returns rows of x that does not match in y

```{r}
anti_join_example <- anti_join(animals, sites, by = "location")
```

## Refresher

```{r}
library(palmerpenguins)
penguins <- palmerpenguins::penguins
```

Only include penguins at Biscoe and Dream islands,

```{r}
Biscoe_Dream_penguins <- penguins |> 
  filter(island %in% c("Biscoe", "Dream")) |> 
  select(-year, -sex) |> 
  mutate(body_mass_kg = body_mass_g / 1000) |> 
  rename(location = island)


```

# Afternoon session

## Dates and times with `lubridate`

```{r}
library(lubridate)
```

```{r}
my_date <- "03-15-1998"
# to use lubridate, must call it and input the format of date given. (either mdy,dmy,ymd). Will return in ISO form
lubridate::mdy(my_date) 

my_datee <- "11/07/2003"
lubridate::dmy(my_datee)

date <- "08-Jun-1974"
lubridate::dmy(date)

date1 <- "19610518"
lubridate::ymd(date1)
```

```{r}
lubridate::ymd("1942-08-30")

lubridate::mdy("09/22/84")
```

```{r}
time <- "2020-08-12 11:18"
time <- lubridate::ymd_hm(time)  #year, month, day, hours, mins
class(time)
```

```{r}
#time zone conversion
with_tz(time, "America/Los_Angeles")

with_tz(time, "Europe/London")

with_tz(time, "Asia/Jakarta")

my_time <- ymd_hms(time)
year(my_time)
day(my_time)
second(my_time)

```

```{r}
my_bday <- ymd("19991012")

wday(my_bday, label = TRUE)

week(my_bday)
```

```{r}
urchin_counts <- tribble(
  ~date, ~species, ~size_mm,
  "10/3/2020", "purple", 55,
  "10/4/2020", "red", 48,
  "11/17/2020", "red", 67
)

#how many were seen each month?
#have to convert to date and pull out month so we can use it as a grouping variable

urchin_ymd <- urchin_counts |> 
  mutate(date = mdy(date)) |> 
  mutate(year = year(date), # makes a year column
         month = month(date), # makes a month column
         day = day(date)) # makes a day column
```

### Intervals

```{r}
day_1 <- ymd("2020-01-06")
day_2 <- ymd("2020-05-18")

time_interval <- interval(day_1, day_2)

time_length(time_interval, "year")
```

## stringr for working with strings using `str_detect`

```{r}
my_string <- "Batman likes them cheeses"

my_string |> 
  str_detect("likes") #returns true, looks for this string

my_string |> 
  str_detect("pup")

new_string <- c("pizza", "pie", "tacos")
new_string |> 
  str_detect("pizza")
```

```{r}
skywalkers <- starwars |> 
  filter(str_detect(name, pattern = "Skywalker"))
#starting from og starwars data frame, only keep rows where pattern skywalker exists in nanme column

#our turn to save anything with Maul in it
mauls <- starwars |> 
  filter(str_detect(name, pattern = "Maul"))

#create a subset that keeps rows where blue shows up in the eye color either alone or in combo
blue_eyes <- starwars |> 
  filter(str_detect(eye_color, pattern = "blue"))
```

## str_replace to replace string patterns

```{r}
firewalkers <- starwars |> #don't forget the mutate function!
  mutate(name_2 = str_replace(name, pattern = "Sky", replacement = "Fire")) #what will populate the new name column is Fire when it sees sky
```

Removing white/extra spaces

```{r}
feedback <- c("I  ate      some   nachos", "   Wednesday          Morning  ")
str_trim(feedback) #removes exterior white spaces, like by morning^
str_squish(feedback)

# str_to*
str_to_lower(feedback)
str_to_title(feedback)
str_to_upper(feedback)
str_to_sentence(feedback)

#from starwars df, create a new dataframe starwars_lc that adds a new column called name_lower containing character names converted to all lower case
starwars_lc <- starwars |> 
  mutate(name_lower = str_to_lower(name))
```

## case_when()

```{r}
sw_robot <- starwars |> 
  mutate(robot_status = case_when(
    species == "Droid" ~ "A ROBOT!!!!",
    species == "Human" ~ "Issa human!",
    TRUE ~ "This is something else."
  )) 

#what's in the new column changes based on what is in the original column
```
